# -*- coding: utf-8 -*-
"""Task - 03

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QAJGEDym6x-FBwoD40YgNgWTntRg0qEO
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, export_text, plot_tree
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
from google.colab import files

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip"

!wget {url}
!unzip bank-additional.zip

df = pd.read_csv('bank-additional/bank-additional-full.csv', sep=';')

print("Dataset shape:", df.shape)
print("\nFirst 5 rows:")
print(df.head())
print("\nColumn information:")
print(df.info())
print("\nTarget variable distribution:")
print(df['y'].value_counts())

label_encoders = {}
categorical_cols = ['job', 'marital', 'education', 'default', 'housing', 'loan',
                    'contact', 'month', 'day_of_week', 'poutcome']

for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

df['y'] = df['y'].map({'no': 0, 'yes': 1})

X = df.drop('y', axis=1)
y = df['y']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

dt_classifier = DecisionTreeClassifier(max_depth=5, random_state=42)
dt_classifier.fit(X_train, y_train)

y_pred = dt_classifier.predict(X_test)

print("\nModel Evaluation:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))


plt.figure(figsize=(20,10))
plot_tree(dt_classifier, feature_names=X.columns, class_names=['No', 'Yes'], filled=True, rounded=True)
plt.title("Decision Tree Visualization")
plt.show()

plt.figure(figsize=(20,10))
plot_tree(dt_classifier, feature_names=X.columns, class_names=['No', 'Yes'], filled=True, rounded=True)
plt.savefig('decision_tree.png', dpi=300, bbox_inches='tight')

feature_importances = pd.DataFrame({
    'Feature': X.columns,
    'Importance': dt_classifier.feature_importances_
}).sort_values(by='Importance', ascending=False)

print("\nFeature Importances:")
print(feature_importances)
with open('model_results.txt', 'w') as f:
    f.write("Decision Tree Classifier Results\n")
    f.write("================================\n\n")
    f.write(f"Accuracy: {accuracy_score(y_test, y_pred)}\n\n")
    f.write("Confusion Matrix:\n")
    f.write(np.array2string(confusion_matrix(y_test, y_pred)) + "\n\n")
    f.write("Classification Report:\n")
    f.write(classification_report(y_test, y_pred) + "\n\n")
    f.write("Feature Importances:\n")
    f.write(feature_importances.to_string() + "\n\n")